name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'none'
        type: choice
        options:
          - 'none'
          - 'patch'
          - 'minor'
          - 'major'
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine==6.0.1
        
    - name: Update version if requested
      if: ${{ github.event.inputs.version_bump != 'none' }}
      run: |
        python -c "
        import re
        
        # Read current version
        with open('metax/utils/version.py', 'r') as f:
            content = f.read()
        
        # Extract current version
        version_match = re.search(r\"__version__ = '([^']+)'\", content)
        if not version_match:
            raise ValueError('Could not find version in file')
        
        current_version = version_match.group(1)
        major, minor, patch = map(int, current_version.split('.'))
        
        # Bump version based on input
        bump_type = '${{ github.event.inputs.version_bump }}'
        if bump_type == 'major':
            major += 1
            minor = 0
            patch = 0
        elif bump_type == 'minor':
            minor += 1
            patch = 0
        elif bump_type == 'patch':
            patch += 1
        
        new_version = f'{major}.{minor}.{patch}'
        
        # Update version file
        new_content = re.sub(
            r\"__version__ = '[^']+'\",
            f\"__version__ = '{new_version}'\",
            content
        )
        
        with open('metax/utils/version.py', 'w') as f:
            f.write(new_content)
        
        print(f'Updated version from {current_version} to {new_version}')
        "
        
    - name: Show current version
      run: |
        python -c "
        with open('metax/utils/version.py', 'r') as f:
            print('Current version file content:')
            print(f.read())
        "
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: List built files
      run: |
        echo "Built files:"
        ls -la dist/
        echo "Package contents:"
        python -c "
        import os
        for file in os.listdir('dist'):
            if file.endswith('.whl') or file.endswith('.tar.gz'):
                print(f'  - {file}')
        "
        
    - name: Commit version update
      if: ${{ github.event.inputs.version_bump != 'none' && !github.event.inputs.dry_run }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add metax/utils/version.py
        git commit -m "Bump version to $(python -c 'exec(open(\"metax/utils/version.py\").read()); print(__version__)')" || exit 0
        git push
        
    - name: Create Git tag
      if: ${{ !github.event.inputs.dry_run }}
      run: |
        VERSION=$(python -c 'exec(open("metax/utils/version.py").read()); print(__version__)')
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        
    - name: Publish to PyPI
      if: ${{ !github.event.inputs.dry_run }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing to PyPI..."
        twine upload dist/*
        
    - name: Dry run summary
      if: ${{ github.event.inputs.dry_run }}
      run: |
        echo "üèÉ‚Äç‚ôÇÔ∏è DRY RUN COMPLETED"
        echo "‚úÖ Package built successfully"
        echo "‚úÖ Package validation passed"
        echo "‚ÑπÔ∏è  To publish for real, run this workflow again with 'Dry run' unchecked"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 30
